<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>112</x>
      <y>8</y>
      <w>232</w>
      <h>136</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--

#data : Type

--
+ Node() : constructor
+ Node(Type data) : constructor

+ getData() : Type
+ setData(Type data) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>336</x>
      <y>56</y>
      <w>192</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
Extends
</panel_attributes>
    <additional_attributes>10.0;20.0;220.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>512</x>
      <y>8</y>
      <w>272</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>BinaryTreeNode&lt;Type&gt;
--
- root : BinaryTreeNode&lt;Type&gt;
- left : BinaryTreeNode&lt;Type&gt;
- right : BinaryTreeNode&lt;Type&gt;
--
+ BinaryTreeNode() : constructor
+ BinaryTreeNode(Type data) : constructor

+ getRoot() : BinaryTreeNode&lt;Type&gt; *
+ getLeft() : BinaryTreeNode&lt;Type&gt; *
+ getRight() : BinaryTreeNode&lt;Type&gt; *

+ setRoot(BinaryTreeNode&lt;Type&gt; *) : void
+ setLeft(BinaryTreeNode&lt;Type&gt; *) : void
+ setRight(BinaryTreeNode&lt;Type&gt; *) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>160</x>
      <y>216</y>
      <w>248</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>/Tree&lt;Type&gt;/
--
# root : BinaryTreeNode&lt;Type&gt;
--
*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

 *Traversals*
 + inOrderTraversal() : void
 + preOrderTraversal() : void
 + postOrderTraversal() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>488</x>
      <y>256</y>
      <w>464</w>
      <h>480</h>
    </coordinates>
    <panel_attributes>bg=#90065
BinarySearchTree&lt;Type&gt;
--
*Structure*
+ BinarySearchTree() : Constructor
+ ~BinarySearchTree9) : Destructor

*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Recusive Information Helpers*
# calculateSize(BinaryTreeNode&lt;Type&gt; * startNode) : int
# calculateHeight(BinaryTreeNode&lt;Type&gt; * startNode) : int
# isBalanced(BinaryTreeNode&lt;Type&gt; * startNode) : bool
# isComplete(BinaryTreeNode&lt;Type&gt; * startNode, int index, int size) : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Recursive Data Helpers*
# removeNode(BinaryTreeNode&lt;Type&gt; * removeMe) : void

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Recursive Traversal Helpers*
# inOrderTraversal(BinaryTreeNode&lt;Type&gt; * intStart) : void
# preOrderTraversal(BinaryTreeNode&lt;Type&gt; * preStart) : void
# postOrderTraversal(BinaryTreeNode&lt;Type&gt; * postStart) : void
# getRightMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *
# getLeftMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
